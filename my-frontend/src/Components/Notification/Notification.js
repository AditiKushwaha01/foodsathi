import React, { useState, useEffect } from 'react';
import './Notification.css';
import { IoNotificationsSharp } from "react-icons/io5";

function Notification() {
  const [notifications, setNotifications] = useState([]);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0); // Track unread notifications

  // Simulating a new notification when a donor generates a request
  useEffect(() => {
    const interval = setInterval(() => {
      // Simulating a new notification on request generation
      const newNotification = { 
        id: notifications.length + 1, 
        message: 'New request generated by a donor!' 
      };
      
      setNotifications((prev) => [...prev, newNotification]);
      setUnreadCount((prevCount) => prevCount + 1); // Increase unread count
    }, 10000); // New notification every 10 seconds (for testing purposes)
    
    return () => clearInterval(interval); // Cleanup interval on unmount
  }, [notifications]); // Trigger effect when notifications change

  const handleNotificationClick = () => {
    setIsDropdownOpen(!isDropdownOpen);
    
    // Mark notifications as read when dropdown is opened
    if (isDropdownOpen) {
      setUnreadCount(0); // Reset unread count
    }
  };

  return (
    <div className="notification-container">
      {/* Notification Icon with Blue Dot */}
      <div className="notification-icon" onClick={handleNotificationClick}>
        <IoNotificationsSharp />
        {unreadCount > 0 && (
          <div className="notification-dot"></div>
        )}
      </div>

      {/* Dropdown for Notifications */}
      <div className={`notification-dropdown ${isDropdownOpen ? 'open' : ''}`}>
        <h4>Notifications</h4>
        <ul>
          {notifications.map((notification) => (
            <li key={notification.id}>{notification.message}</li>
          ))}
        </ul>
      </div>
    </div>
  );
}

export default Notification;
